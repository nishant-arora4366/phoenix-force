[
    {
      "schemaname": "public",
      "tablename": "api_usage_analytics",
      "policyname": "Admins can view all API analytics",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'admin'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "api_usage_analytics",
      "policyname": "Service role can insert API analytics",
      "permissive": "PERMISSIVE",
      "roles": "{service_role}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true"
    },
    {
      "schemaname": "public",
      "tablename": "api_usage_analytics",
      "policyname": "Users can view their own API analytics",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Anyone can view auction bids",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Authenticated users can view bids",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Bidders can delete their bids",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "DELETE",
      "qual": "(auth.uid() = bidder_user_id)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Bidders can update their bids",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(auth.uid() = bidder_user_id)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Captains and admins can place bids",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(is_team_captain(team_id, auth.uid()) OR is_admin(auth.uid()))"
    },
    {
      "schemaname": "public",
      "tablename": "auction_bids",
      "policyname": "Captains can bid for their teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "((auth.uid() = bidder_user_id) AND (EXISTS ( SELECT 1\n   FROM teams\n  WHERE ((teams.id = auction_bids.team_id) AND (teams.captain_user_id = auth.uid())))))"
    },
    {
      "schemaname": "public",
      "tablename": "auction_config",
      "policyname": "Admins can manage auction config",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "auction_config",
      "policyname": "Authenticated users can view auction config",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "notifications",
      "policyname": "System can insert notifications",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true"
    },
    {
      "schemaname": "public",
      "tablename": "notifications",
      "policyname": "Users can update their own notifications",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "notifications",
      "policyname": "Users can view their own notifications",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(user_id = auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skill_assignments",
      "policyname": "Anyone can view player skill assignments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skill_assignments",
      "policyname": "Users can manage their own skill assignments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM players\n  WHERE ((players.id = player_skill_assignments.player_id) AND (players.user_id = auth.uid()))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skill_values",
      "policyname": "Admins can manage player skill values",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'admin'::text) AND ((users.status)::text = 'approved'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skill_values",
      "policyname": "Anyone can view player skill values",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skills",
      "policyname": "Admins can manage player skills",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'admin'::text) AND ((users.status)::text = 'approved'::text))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_skills",
      "policyname": "Anyone can view player skills",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_tags",
      "policyname": "Admins can manage player tags",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "player_tags",
      "policyname": "Authenticated users can view player tags",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "players",
      "policyname": "Admins can manage all players",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "players",
      "policyname": "Authenticated users can view players",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tags",
      "policyname": "Admins can manage tags",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tags",
      "policyname": "Authenticated users can view tags",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "team_players",
      "policyname": "Admins can manage team players",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "team_players",
      "policyname": "Authenticated users can view team players",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Anyone can view teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Authenticated users can view teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Captains and admins can update their team",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "((captain_user_id = auth.uid()) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Hosts and admins can manage teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(is_tournament_host(tournament_id, auth.uid()) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Hosts can create teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(EXISTS ( SELECT 1\n   FROM tournaments\n  WHERE ((tournaments.id = teams.tournament_id) AND (tournaments.host_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM users\n          WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text)))))))"
    },
    {
      "schemaname": "public",
      "tablename": "teams",
      "policyname": "Team captains can manage their teams",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "((auth.uid() = captain_user_id) OR (EXISTS ( SELECT 1\n   FROM tournaments\n  WHERE ((tournaments.id = teams.tournament_id) AND (tournaments.host_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM users\n          WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text))))))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Allow admins and hosts to manage all slots",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "ALL",
      "qual": "(EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = ANY (ARRAY[('admin'::character varying)::text, ('host'::character varying)::text])))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Allow public to view tournament slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Allow users to insert their own slot registrations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))"
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Allow users to update their own slot registrations",
      "permissive": "PERMISSIVE",
      "roles": "{authenticated}",
      "cmd": "UPDATE",
      "qual": "(player_id IN ( SELECT players.id\n   FROM players\n  WHERE (players.user_id = auth.uid())))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Anyone can view tournament slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Authenticated users can view tournament slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Hosts and admins can manage tournament slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "(is_tournament_host(tournament_id, auth.uid()) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Hosts can assign slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "((EXISTS ( SELECT 1\n   FROM tournaments\n  WHERE ((tournaments.id = tournament_slots.tournament_id) AND (tournaments.host_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM users\n          WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text))))))) OR ((player_id IS NOT NULL) AND (auth.uid() = player_id)))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournament_slots",
      "policyname": "Players can request slots",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "(((player_id IS NOT NULL) AND (auth.uid() = player_id)) OR (EXISTS ( SELECT 1\n   FROM tournaments\n  WHERE ((tournaments.id = tournament_slots.tournament_id) AND (tournaments.host_id = auth.uid()) AND (EXISTS ( SELECT 1\n           FROM users\n          WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text))))))))"
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Allow public to view tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Anyone can view tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Authenticated users can view tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Hosts and admins can manage tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "((host_id = auth.uid()) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Hosts can create tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "((auth.uid() = host_id) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text)))))"
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Hosts can delete their tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "DELETE",
      "qual": "((auth.uid() = host_id) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text)))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "tournaments",
      "policyname": "Hosts can update their tournaments",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "((auth.uid() = host_id) AND (EXISTS ( SELECT 1\n   FROM users\n  WHERE ((users.id = auth.uid()) AND ((users.role)::text = 'host'::text)))))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Admins can delete users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "DELETE",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Admins can insert users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "is_admin(auth.uid())"
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Allow all users to update users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Allow all users to view users",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Allow user registration",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "INSERT",
      "qual": null,
      "with_check": "true"
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Allow users to delete own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "DELETE",
      "qual": "true",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can update their own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "(auth.uid() = id)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can update their own profile or admins can update all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "UPDATE",
      "qual": "((auth.uid() = id) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can view their own profile",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.uid() = id)",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "users",
      "policyname": "Users can view their own profile or admins can view all",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "((auth.uid() = id) OR is_admin(auth.uid()))",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "waitlist",
      "policyname": "Admins can manage waitlist",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "ALL",
      "qual": "is_admin(auth.uid())",
      "with_check": null
    },
    {
      "schemaname": "public",
      "tablename": "waitlist",
      "policyname": "Authenticated users can view waitlist",
      "permissive": "PERMISSIVE",
      "roles": "{public}",
      "cmd": "SELECT",
      "qual": "(auth.role() = 'authenticated'::text)",
      "with_check": null
    }
  ]